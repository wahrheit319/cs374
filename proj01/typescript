Script started on 2023-10-31 01:35:52-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="138" LINES="27"]
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ cat circuitSatisfiabilitySlices.c
/* circuitSatisfiabilitySlices.c
 *
 * This program, a modification of circuitSatisfiability.c, solves the Circuit 
 * Satisfiability Problem using MPI for parallel processing, distributing work 
 * using the 'Slices' Parallel Loop pattern.
 *
 * Author: Yuese Li
 * Institution: Calvin University
 * Course: CS374 (High Performance Computing)
 * Date: October 28, 2023
 * Purpose: Project 1 - To learn and implement parallel computing concepts
 */


#include <stdio.h>     // printf()
#include <limits.h>    // UINT_MAX
#include <mpi.h>       // MPI functions

int checkCircuit (int, long);

int main (int argc, char *argv[]) {
    long i;               // loop variable (64 bits) 
    int id;               // process id 
    int numProcesses;     // number of processes
    int count = 0;        // number of solutions 
    int globalCount = 0;  // total number of solutions across all processes

    // Initialize MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &id);
    MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

    // Variables to hold the start time and total time for performance measurement
    double startTime = 0.0, totalTime = 0.0;
    if (id == 0) {
        printf ("\nProcess %d is checking the circuit...\n", id);
        startTime = MPI_Wtime();
    }

    // Main loop: each process checks the circuit for a subset of inputs
    for (i = id; i <= UINT_MAX; i += numProcesses) {
        count += checkCircuit(id, i);
    }

    // Reducing the counts from all processes to get the total count
    MPI_Reduce(&count, &globalCount, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

     // If the current process is process 0, print the total time taken and the total number of solutions found
    if (id == 0) {
        totalTime = MPI_Wtime() - startTime;
        printf ("Process %d finished in time %f secs.\n", id, totalTime);
        printf("A total of %d solutions were found.\n", globalCount);
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}

/* EXTRACT_BIT is a macro that extracts the ith bit of number n.
 *
 * parameters: n, a number;
 *             i, the position of the bit we want to know.
 *
 * return: 1 if 'i'th bit of 'n' is 1; 0 otherwise 
 */

#define EXTRACT_BIT(n,i) ((n & (1<<i)) ? 1 : 0)

/* checkCircuit() checks the circuit for a given input.
 * parameters: id, the id of the process checking;
 *             bits, the (long) rep. of the input being checked.
 *
 * output: the binary rep. of bits if the circuit outputs 1
 * return: 1 if the circuit outputs 1; 0 otherwise.
 */

#define SIZE 32

int checkCircuit (int id, long bits) {
   int v[SIZE];        /* Each element is one of the 32 bits */
   int i;

   for (i = 0; i < SIZE; i++) {
     v[i] = EXTRACT_BIT(bits,i);
   }

   if ( ( (v[0] || v[1]) && (!v[1] || !v[3]) && (v[2] || v[3])
       && (!v[3] || !v[4]) && (v[4] || !v[5])
       && (v[5] || !v[6]) && (v[5] || v[6])
       && (v[6] || !v[15]) && (v[7] || !v[8])
       && (!v[7] || !v[13]) && (v[8] || v[9])
       && (v[8] || !v[9]) && (!v[9] || !v[10])
       && (v[9] || v[11]) && (v[10] || v[11])
       && (v[12] || v[13]) && (v[13] || !v[14])
       && (v[14] || v[15]) )
       &&
          ( (v[16] || v[17]) && (!v[17] || !v[19]) && (v[18] || v[19])
       && (!v[19] || !v[20]) && (v[20] || !v[21])
       && (v[21] || !v[22]) && (v[21] || v[22])
       && (v[22] || !v[31]) && (v[23] || !v[24])
       && (!v[23] || !v[29]) && (v[24] || v[25])
       && (v[24] || !v[25]) && (!v[25] || !v[26])
       && (v[25] || v[27]) && (v[26] || v[27])
       && (v[28] || v[29]) && (v[29] || !v[30])
       && (v[30] || v[31]) ) )
   {
      printf ("%d) %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d \n", id,
         v[31],v[30],v[29],v[28],v[27],v[26],v[25],v[24],v[23],v[22],
         v[21],v[20],v[19],v[18],v[17],v[16],v[15],v[14],v[13],v[12],
         v[11],v[10],v[9],v[8],v[7],v[6],v[5],v[4],v[3],v[2],v[1],v[0]);
      fflush (stdout);
      return 1;
   } else {
      return 0;
   }
}

]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ cat circuitSatisfiabilityChunks.c
/* circuitSatisfiabilityChunks.c
 *
 * An adaptation of circuitSatisfiability.c, this program employs MPI for 
 * parallel processing, distributing tasks using the 'Chunks' Parallel Loop pattern.
 *
 * Author: Yuese Li
 * Institution: Calvin University
 * Course: CS374 (High Performance Computing)
 * Date: October 28, 2023
 * Purpose: Project 1 - To learn and implement parallel computing concepts
 */


#include <stdio.h>     // printf()
#include <limits.h>    // UINT_MAX
#include <mpi.h>       // MPI functions

int checkCircuit (int, long);

// Function to calculate start and stop values for each chunk
void getChunkStartStopValues(int id, int numProcesses, long numIterations, long* start, long* stop) {
    long chunkSize = numIterations / numProcesses;
    long remainder = numIterations % numProcesses;
    
    if (id < remainder) {
        *start = id * (chunkSize + 1);
        *stop = *start + chunkSize + 1;
    } else {
        *start = id * chunkSize + remainder;
        *stop = *start + chunkSize;
    }
}

int main (int argc, char *argv[]) {
    int id;               // process id 
    int numProcesses;     // number of processes
    int count = 0;        // number of solutions 
    long start, stop;     // chunk start and stop values
    int globalCount = 0;  // total number of solutions across all processes
    
    // Initialize MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &id);
    MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

    // Calculate start and stop values for this process's chunk
    getChunkStartStopValues(id, numProcesses, UINT_MAX+1L, &start, &stop);

    // Start timer for process 0
    double startTime = 0.0, totalTime = 0.0;
    if (id == 0) {
        printf ("\nProcess %d is checking the circuit...\n", id);
        startTime = MPI_Wtime();
    }

    // Main loop: check the circuit for all values in this process's chunk
    for (long i = start; i < stop; i++) {
        count += checkCircuit(id, i);
    }

    // Collect results from all processes
    MPI_Reduce(&count, &globalCount, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Print results for process 0
    if (id == 0) {
        totalTime = MPI_Wtime() - startTime;
        printf ("Process %d finished in time %f secs.\n", id, totalTime);
        printf("A total of %d solutions were found.\n", globalCount);
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}

/* EXTRACT_BIT is a macro that extracts the ith bit of number n.
 *
 * parameters: n, a number;
 *             i, the position of the bit we want to know.
 *
 * return: 1 if 'i'th bit of 'n' is 1; 0 otherwise 
 */

#define EXTRACT_BIT(n,i) ((n & (1<<i)) ? 1 : 0)

/* checkCircuit() checks the circuit for a given input.
 * parameters: id, the id of the process checking;
 *             bits, the (long) rep. of the input being checked.
 *
 * output: the binary rep. of bits if the circuit outputs 1
 * return: 1 if the circuit outputs 1; 0 otherwise.
 */

#define SIZE 32

int checkCircuit (int id, long bits) {
   int v[SIZE];        /* Each element is one of the 32 bits */
   int i;

   for (i = 0; i < SIZE; i++) {
     v[i] = EXTRACT_BIT(bits,i);
   }

   if ( ( (v[0] || v[1]) && (!v[1] || !v[3]) && (v[2] || v[3])
       && (!v[3] || !v[4]) && (v[4] || !v[5])
       && (v[5] || !v[6]) && (v[5] || v[6])
       && (v[6] || !v[15]) && (v[7] || !v[8])
       && (!v[7] || !v[13]) && (v[8] || v[9])
       && (v[8] || !v[9]) && (!v[9] || !v[10])
       && (v[9] || v[11]) && (v[10] || v[11])
       && (v[12] || v[13]) && (v[13] || !v[14])
       && (v[14] || v[15]) )
       &&
          ( (v[16] || v[17]) && (!v[17] || !v[19]) && (v[18] || v[19])
       && (!v[19] || !v[20]) && (v[20] || !v[21])
       && (v[21] || !v[22]) && (v[21] || v[22])
       && (v[22] || !v[31]) && (v[23] || !v[24])
       && (!v[23] || !v[29]) && (v[24] || v[25])
       && (v[24] || !v[25]) && (!v[25] || !v[26])
       && (v[25] || v[27]) && (v[26] || v[27])
       && (v[28] || v[29]) && (v[29] || !v[30])
       && (v[30] || v[31]) ) )
   {
      printf ("%d) %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d \n", id,
         v[31],v[30],v[29],v[28],v[27],v[26],v[25],v[24],v[23],v[22],
         v[21],v[20],v[19],v[18],v[17],v[16],v[15],v[14],v[13],v[12],
         v[11],v[10],v[9],v[8],v[7],v[6],v[5],v[4],v[3],v[2],v[1],v[0]);
      fflush (stdout);
      return 1;
   } else {
      return 0;
   }
}

]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ cat circuitSatisfiability.c
/* circuitSatifiability.c solves the Circuit Satisfiability
 *  Problem using a brute-force sequential solution.
 *
 *   The particular circuit being tested is "wired" into the
 *   logic of function 'checkCircuit'. All combinations of
 *   inputs that satisfy the circuit are printed.
 *
 *   16-bit version by Michael J. Quinn, Oregon State University, Sept 2002.
 *   Extended to 32 bits by Joel C. Adams, Calvin University, Sept 2013.
 * 
 * Author: Yuese Li
 * Institution: Calvin University
 * Course: CS374 (High Performance Computing)
 * Date: October 28, 2023
 * Purpose: Project 1 - To learn and implement parallel computing concepts
 */

#include <stdio.h>     // printf()
#include <limits.h>    // UINT_MAX
#include <mpi.h>       // MPI functions

int checkCircuit (int, long);

int main (int argc, char *argv[]) {
   long i;               // loop variable (64 bits) 
   int id = 0;           // process id 
   int count = 0;        // number of solutions 
     
   MPI_Init(&argc, &argv);
   double startTime = 0.0, totalTime = 0.0;
   startTime = MPI_Wtime();

   printf ("\nProcess %d is checking the circuit...\n", id);

   for (i = 0; i <= UINT_MAX; ++i) {
      count += checkCircuit (id, i);
   }

   totalTime = MPI_Wtime() - startTime;
   MPI_Finalize();

   printf ("Process %d finished.\n", id);
   fflush (stdout);

   printf("Process %d finished in time %f secs.\n", id, totalTime);
   //printf("A total of %d solutions were found.\n", globalCount);
   return 0;
}

/* EXTRACT_BIT is a macro that extracts the ith bit of number n.
 *
 * parameters: n, a number;
 *             i, the position of the bit we want to know.
 *
 * return: 1 if 'i'th bit of 'n' is 1; 0 otherwise 
 */

#define EXTRACT_BIT(n,i) ( (n & (1<<i) ) ? 1 : 0)


/* checkCircuit() checks the circuit for a given input.
 * parameters: id, the id of the process checking;
 *             bits, the (long) rep. of the input being checked.
 *
 * output: the binary rep. of bits if the circuit outputs 1
 * return: 1 if the circuit outputs 1; 0 otherwise.
 */

#define SIZE 32

int checkCircuit (int id, long bits) {
   int v[SIZE];        /* Each element is one of the 32 bits */
   int i;

   for (i = 0; i < SIZE; i++) {
     v[i] = EXTRACT_BIT(bits,i);
   }

   if ( ( (v[0] || v[1]) && (!v[1] || !v[3]) && (v[2] || v[3])
       && (!v[3] || !v[4]) && (v[4] || !v[5])
       && (v[5] || !v[6]) && (v[5] || v[6])
       && (v[6] || !v[15]) && (v[7] || !v[8])
       && (!v[7] || !v[13]) && (v[8] || v[9])
       && (v[8] || !v[9]) && (!v[9] || !v[10])
       && (v[9] || v[11]) && (v[10] || v[11])
       && (v[12] || v[13]) && (v[13] || !v[14])
       && (v[14] || v[15]) )
       &&
          ( (v[16] || v[17]) && (!v[17] || !v[19]) && (v[18] || v[19])
       && (!v[19] || !v[20]) && (v[20] || !v[21])
       && (v[21] || !v[22]) && (v[21] || v[22])
       && (v[22] || !v[31]) && (v[23] || !v[24])
       && (!v[23] || !v[29]) && (v[24] || v[25])
       && (v[24] || !v[25]) && (!v[25] || !v[26])
       && (v[25] || v[27]) && (v[26] || v[27])
       && (v[28] || v[29]) && (v[29] || !v[30])
       && (v[30] || v[31]) ) )
   {
      printf ("%d) %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d \n", id,
         v[31],v[30],v[29],v[28],v[27],v[26],v[25],v[24],v[23],v[22],
         v[21],v[20],v[19],v[18],v[17],v[16],v[15],v[14],v[13],v[12],
         v[11],v[10],v[9],v[8],v[7],v[6],v[5],v[4],v[3],v[2],v[1],v[0]);
      fflush (stdout);
      return 1;
   } else {
      return 0;
   }
}

]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ make
make: Nothing to be done for 'all'.
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ mpirun -np 16 -machinefile hosts ./circuitSatisfiabilitySlices

Process 0 is checking the circuit...
5) 10011001111101011001100111110101 
5) 10011001111101011001101111110101 
5) 10011001111101011001110111110101 
5) 10011001111101101001100111110101 
5) 10011001111101101001101111110101 
5) 10011001111101101001110111110101 
5) 10011001111101111001100111110101 
5) 10011001111101111001101111110101 
5) 10011001111101111001110111110101 
5) 10011011111101011001100111110101 
5) 10011011111101011001101111110101 
5) 10011011111101011001110111110101 
5) 10011011111101101001100111110101 
5) 10011011111101101001101111110101 
5) 10011011111101101001110111110101 
5) 10011011111101111001100111110101 
5) 10011011111101111001101111110101 
5) 10011011111101111001110111110101 
5) 10011101111101011001100111110101 
5) 10011101111101011001101111110101 
5) 10011101111101011001110111110101 
5) 10011101111101101001100111110101 
5) 10011101111101101001101111110101 
5) 10011101111101101001110111110101 
5) 10011101111101111001100111110101 
5) 10011101111101111001101111110101 
5) 10011101111101111001110111110101 
7) 10011001111101011001100111110111 
7) 10011001111101011001101111110111 
7) 10011001111101011001110111110111 
7) 10011001111101101001100111110111 
7) 10011001111101101001101111110111 
7) 10011001111101101001110111110111 
7) 10011001111101111001100111110111 
7) 10011001111101111001101111110111 
7) 10011001111101111001110111110111 
7) 10011011111101011001100111110111 
7) 10011011111101011001101111110111 
7) 10011011111101011001110111110111 
7) 10011011111101101001100111110111 
7) 10011011111101101001101111110111 
7) 10011011111101101001110111110111 
7) 10011011111101111001100111110111 
7) 10011011111101111001101111110111 
7) 10011011111101111001110111110111 
7) 10011101111101011001100111110111 
7) 10011101111101011001101111110111 
7) 10011101111101011001110111110111 
7) 10011101111101101001100111110111 
7) 10011101111101101001101111110111 
7) 10011101111101101001110111110111 
7) 10011101111101111001100111110111 
7) 10011101111101111001101111110111 
7) 10011101111101111001110111110111 
6) 10011001111101011001100111110110 
6) 10011001111101011001101111110110 
6) 10011001111101011001110111110110 
6) 10011001111101101001100111110110 
6) 10011001111101101001101111110110 
6) 10011001111101101001110111110110 
6) 10011001111101111001100111110110 
6) 10011001111101111001101111110110 
6) 10011001111101111001110111110110 
6) 10011011111101011001100111110110 
6) 10011011111101011001101111110110 
6) 10011011111101011001110111110110 
6) 10011011111101101001100111110110 
6) 10011011111101101001101111110110 
6) 10011011111101101001110111110110 
6) 10011011111101111001100111110110 
6) 10011011111101111001101111110110 
6) 10011011111101111001110111110110 
6) 10011101111101011001100111110110 
6) 10011101111101011001101111110110 
6) 10011101111101011001110111110110 
6) 10011101111101101001100111110110 
6) 10011101111101101001101111110110 
6) 10011101111101101001110111110110 
6) 10011101111101111001100111110110 
6) 10011101111101111001101111110110 
6) 10011101111101111001110111110110 
Process 0 finished in time 21.156466 secs.
A total of 81 solutions were found.
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ [Kmpirun -np 16 -machinefile hosts ./circuitSatisfiabilitySliceses      Chunks

Process 0 is checking the circuit...
9) 10011001111101011001100111110101 
9) 10011001111101011001100111110110 
9) 10011001111101011001100111110111 
9) 10011001111101011001101111110101 
9) 10011001111101011001101111110110 
9) 10011001111101011001101111110111 
9) 10011001111101011001110111110101 
9) 10011001111101011001110111110110 
9) 10011001111101011001110111110111 
9) 10011001111101101001100111110101 
9) 10011001111101101001100111110110 
9) 10011001111101101001100111110111 
9) 10011001111101101001101111110101 
9) 10011001111101101001101111110110 
9) 10011001111101101001101111110111 
9) 10011001111101101001110111110101 
9) 10011001111101101001110111110110 
9) 10011001111101101001110111110111 
9) 10011001111101111001100111110101 
9) 10011001111101111001100111110110 
9) 10011001111101111001100111110111 
9) 10011001111101111001101111110101 
9) 10011001111101111001101111110110 
9) 10011001111101111001101111110111 
9) 10011001111101111001110111110101 
9) 10011001111101111001110111110110 
9) 10011001111101111001110111110111 
9) 10011011111101011001100111110101 
9) 10011011111101011001100111110110 
9) 10011011111101011001100111110111 
9) 10011011111101011001101111110101 
9) 10011011111101011001101111110110 
9) 10011011111101011001101111110111 
9) 10011011111101011001110111110101 
9) 10011011111101011001110111110110 
9) 10011011111101011001110111110111 
9) 10011011111101101001100111110101 
9) 10011011111101101001100111110110 
9) 10011011111101101001100111110111 
9) 10011011111101101001101111110101 
9) 10011011111101101001101111110110 
9) 10011011111101101001101111110111 
9) 10011011111101101001110111110101 
9) 10011011111101101001110111110110 
9) 10011011111101101001110111110111 
9) 10011011111101111001100111110101 
9) 10011011111101111001100111110110 
9) 10011011111101111001100111110111 
9) 10011011111101111001101111110101 
9) 10011011111101111001101111110110 
9) 10011011111101111001101111110111 
9) 10011011111101111001110111110101 
9) 10011011111101111001110111110110 
9) 10011011111101111001110111110111 
9) 10011101111101011001100111110101 
9) 10011101111101011001100111110110 
9) 10011101111101011001100111110111 
9) 10011101111101011001101111110101 
9) 10011101111101011001101111110110 
9) 10011101111101011001101111110111 
9) 10011101111101011001110111110101 
9) 10011101111101011001110111110110 
9) 10011101111101011001110111110111 
9) 10011101111101101001100111110101 
9) 10011101111101101001100111110110 
9) 10011101111101101001100111110111 
9) 10011101111101101001101111110101 
9) 10011101111101101001101111110110 
9) 10011101111101101001101111110111 
9) 10011101111101101001110111110101 
9) 10011101111101101001110111110110 
9) 10011101111101101001110111110111 
9) 10011101111101111001100111110101 
9) 10011101111101111001100111110110 
9) 10011101111101111001100111110111 
9) 10011101111101111001101111110101 
9) 10011101111101111001101111110110 
9) 10011101111101111001101111110111 
9) 10011101111101111001110111110101 
9) 10011101111101111001110111110110 
9) 10011101111101111001110111110111 
Process 0 finished in time 21.305311 secs.
A total of 81 solutions were found.
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ [K enscript typescript\ 
[ 7 pages * 1 copy ] sent to printer
24 lines were wrapped
2 non-printable characters
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ mpirun -np 16 -machinefile hosts ./circuitSatisfiabilityChunksSlicesake[Kcat circuitSatisfiability.c[6@Chunks.cSlices.cexit[Krsh gold 25mpirun -np 2 ./circuitSatisfiabilityChunks4 ./circuitSatisfiabilityChunks8 ./circuitSatisfiabilityChunks[1@16 ./circuitSatisfiabilityChunks32 ./circuitSatisfiabilityChunks64 ./circuitSatisfiabilityChunks32 ./circuitSatisfiabilityChunks16 ./circuitSatisfiabilityChunks[1P8 ./circuitSatisfiabilityChunks4 ./circuitSatisfiabilityChunks2 ./circuitSatisfiabilityChunksrsh gold 25[K[7Pexitcat circuitSatisfiabilitySlices.cChunks.c.c[Kmake[Kpirun -np 16 -machinefile hosts ./circuitSatisfiabilitySlicesChunks[Kssh yl77@ca  borg.calvin.edu
yl77@borg.calvin.edu's password: 
Last login: Tue Oct 31 01:06:40 2023 from borg-fw1-int.calvin.edu
]0;yl77@borg-head1:~[?1034h[yl77@borg-head1 ~]$ cd 374
]0;yl77@borg-head1:~/374[yl77@borg-head1 374]$ cd proj01
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ sbatch script_chunks_16_16.slurm[1P[1P[1@4_16[1P[1P[1@8s[1P[1P[1P[1P[1P[1P[1@s[1@l[1@i[1@c[1@e[1@s
Submitted batch job 219309
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ sbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [Ksbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ cd proj01[K[3P374[2Pexit[16@cat slurm-219308.outsbatch script_chunks_1_1.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.out

Process 0 is checking the circuit...
1) 10011001111101011001100111110101 
1) 10011001111101011001100111110110 
1) 10011001111101011001100111110111 
1) 10011001111101011001101111110101 
1) 10011001111101011001101111110110 
1) 10011001111101011001101111110111 
1) 10011001111101011001110111110101 
1) 10011001111101011001110111110110 
1) 10011001111101011001110111110111 
1) 10011001111101101001100111110101 
1) 10011001111101101001100111110110 
1) 10011001111101101001100111110111 
1) 10011001111101101001101111110101 
1) 10011001111101101001101111110110 
1) 10011001111101101001101111110111 
1) 10011001111101101001110111110101 
1) 10011001111101101001110111110110 
1) 10011001111101101001110111110111 
1) 10011001111101111001100111110101 
1) 10011001111101111001100111110110 
1) 10011001111101111001100111110111 
1) 10011001111101111001101111110101 
1) 10011001111101111001101111110110 
1) 10011001111101111001101111110111 
1) 10011001111101111001110111110101 
1) 10011001111101111001110111110110 
1) 10011001111101111001110111110111 
1) 10011011111101011001100111110101 
1) 10011011111101011001100111110110 
1) 10011011111101011001100111110111 
1) 10011011111101011001101111110101 
1) 10011011111101011001101111110110 
1) 10011011111101011001101111110111 
1) 10011011111101011001110111110101 
1) 10011011111101011001110111110110 
1) 10011011111101011001110111110111 
1) 10011011111101101001100111110101 
1) 10011011111101101001100111110110 
1) 10011011111101101001100111110111 
1) 10011011111101101001101111110101 
1) 10011011111101101001101111110110 
1) 10011011111101101001101111110111 
1) 10011011111101101001110111110101 
1) 10011011111101101001110111110110 
1) 10011011111101101001110111110111 
1) 10011011111101111001100111110101 
1) 10011011111101111001100111110110 
1) 10011011111101111001100111110111 
1) 10011011111101111001101111110101 
1) 10011011111101111001101111110110 
1) 10011011111101111001101111110111 
1) 10011011111101111001110111110101 
1) 10011011111101111001110111110110 
1) 10011011111101111001110111110111 
1) 10011101111101011001100111110101 
1) 10011101111101011001100111110110 
1) 10011101111101011001100111110111 
1) 10011101111101011001101111110101 
1) 10011101111101011001101111110110 
1) 10011101111101011001101111110111 
1) 10011101111101011001110111110101 
1) 10011101111101011001110111110110 
1) 10011101111101011001110111110111 
1) 10011101111101101001100111110101 
1) 10011101111101101001100111110110 
1) 10011101111101101001100111110111 
1) 10011101111101101001101111110101 
1) 10011101111101101001101111110110 
1) 10011101111101101001101111110111 
1) 10011101111101101001110111110101 
1) 10011101111101101001110111110110 
1) 10011101111101101001110111110111 
1) 10011101111101111001100111110101 
1) 10011101111101111001100111110110 
1) 10011101111101111001100111110111 
1) 10011101111101111001101111110101 
1) 10011101111101111001101111110110 
1) 10011101111101111001101111110111 
1) 10011101111101111001110111110101 
1) 10011101111101111001110111110110 
1) 10011101111101111001110111110111 
Process 0 finished in time 152.660715 secs.
A total of 81 solutions were found.
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ cat slurm-219307.outsbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.outsbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.out[1P[1@9

Process 0 is checking the circuit...
23) 10011001111101011001100111110111 
23) 10011001111101011001101111110111 
23) 10011001111101011001110111110111 
23) 10011001111101101001100111110111 
23) 10011001111101101001101111110111 
23) 10011001111101101001110111110111 
23) 10011001111101111001100111110111 
23) 10011001111101111001101111110111 
23) 10011001111101111001110111110111 
21) 10011001111101011001100111110101 
21) 10011001111101011001101111110101 
21) 10011001111101011001110111110101 
21) 10011001111101101001100111110101 
21) 10011001111101101001101111110101 
21) 10011001111101101001110111110101 
21) 10011001111101111001100111110101 
21) 10011001111101111001101111110101 
21) 10011001111101111001110111110101 
22) 10011001111101011001100111110110 
22) 10011001111101011001101111110110 
22) 10011001111101011001110111110110 
22) 10011001111101101001100111110110 
22) 10011001111101101001101111110110 
22) 10011001111101101001110111110110 
22) 10011001111101111001100111110110 
22) 10011001111101111001101111110110 
22) 10011001111101111001110111110110 
23) 10011011111101011001100111110111 
23) 10011011111101011001101111110111 
23) 10011011111101011001110111110111 
23) 10011011111101101001100111110111 
23) 10011011111101101001101111110111 
23) 10011011111101101001110111110111 
23) 10011011111101111001100111110111 
23) 10011011111101111001101111110111 
23) 10011011111101111001110111110111 
21) 10011011111101011001100111110101 
21) 10011011111101011001101111110101 
21) 10011011111101011001110111110101 
21) 10011011111101101001100111110101 
21) 10011011111101101001101111110101 
21) 10011011111101101001110111110101 
21) 10011011111101111001100111110101 
21) 10011011111101111001101111110101 
21) 10011011111101111001110111110101 
22) 10011011111101011001100111110110 
22) 10011011111101011001101111110110 
22) 10011011111101011001110111110110 
22) 10011011111101101001100111110110 
22) 10011011111101101001101111110110 
22) 10011011111101101001110111110110 
22) 10011011111101111001100111110110 
22) 10011011111101111001101111110110 
22) 10011011111101111001110111110110 
23) 10011101111101011001100111110111 
23) 10011101111101011001101111110111 
23) 10011101111101011001110111110111 
23) 10011101111101101001100111110111 
23) 10011101111101101001101111110111 
23) 10011101111101101001110111110111 
23) 10011101111101111001100111110111 
23) 10011101111101111001101111110111 
23) 10011101111101111001110111110111 
21) 10011101111101011001100111110101 
21) 10011101111101011001101111110101 
21) 10011101111101011001110111110101 
21) 10011101111101101001100111110101 
21) 10011101111101101001101111110101 
21) 10011101111101101001110111110101 
21) 10011101111101111001100111110101 
21) 10011101111101111001101111110101 
21) 10011101111101111001110111110101 
22) 10011101111101011001100111110110 
22) 10011101111101011001101111110110 
22) 10011101111101011001110111110110 
22) 10011101111101101001100111110110 
22) 10011101111101101001101111110110 
22) 10011101111101101001110111110110 
22) 10011101111101111001100111110110 
22) 10011101111101111001101111110110 
22) 10011101111101111001110111110110 
Process 0 finished in time 10.562921 secs.
A total of 81 solutions were found.
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ cat slurm-219309.out7.outsbatch script_slices_4_8.slurm[1P[1P[1P[1P[1P[1P[1@c[1@h[1@u[1@n[1@k[1@s
Submitted batch job 219310
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ sbatch script_chunks_4_8.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219309.out7.out[1P[1P[1@1[1@0

Process 0 is checking the circuit...
19) 10011001111101011001100111110101 
19) 10011001111101011001100111110110 
19) 10011001111101011001100111110111 
19) 10011001111101011001101111110101 
19) 10011001111101011001101111110110 
19) 10011001111101011001101111110111 
19) 10011001111101011001110111110101 
19) 10011001111101011001110111110110 
19) 10011001111101011001110111110111 
19) 10011001111101101001100111110101 
19) 10011001111101101001100111110110 
19) 10011001111101101001100111110111 
19) 10011001111101101001101111110101 
19) 10011001111101101001101111110110 
19) 10011001111101101001101111110111 
19) 10011001111101101001110111110101 
19) 10011001111101101001110111110110 
19) 10011001111101101001110111110111 
19) 10011001111101111001100111110101 
19) 10011001111101111001100111110110 
19) 10011001111101111001100111110111 
19) 10011001111101111001101111110101 
19) 10011001111101111001101111110110 
19) 10011001111101111001101111110111 
19) 10011001111101111001110111110101 
19) 10011001111101111001110111110110 
19) 10011001111101111001110111110111 
19) 10011011111101011001100111110101 
19) 10011011111101011001100111110110 
19) 10011011111101011001100111110111 
19) 10011011111101011001101111110101 
19) 10011011111101011001101111110110 
19) 10011011111101011001101111110111 
19) 10011011111101011001110111110101 
19) 10011011111101011001110111110110 
19) 10011011111101011001110111110111 
19) 10011011111101101001100111110101 
19) 10011011111101101001100111110110 
19) 10011011111101101001100111110111 
19) 10011011111101101001101111110101 
19) 10011011111101101001101111110110 
19) 10011011111101101001101111110111 
19) 10011011111101101001110111110101 
19) 10011011111101101001110111110110 
19) 10011011111101101001110111110111 
19) 10011011111101111001100111110101 
19) 10011011111101111001100111110110 
19) 10011011111101111001100111110111 
19) 10011011111101111001101111110101 
19) 10011011111101111001101111110110 
19) 10011011111101111001101111110111 
19) 10011011111101111001110111110101 
19) 10011011111101111001110111110110 
19) 10011011111101111001110111110111 
19) 10011101111101011001100111110101 
19) 10011101111101011001100111110110 
19) 10011101111101011001100111110111 
19) 10011101111101011001101111110101 
19) 10011101111101011001101111110110 
19) 10011101111101011001101111110111 
19) 10011101111101011001110111110101 
19) 10011101111101011001110111110110 
19) 10011101111101011001110111110111 
19) 10011101111101101001100111110101 
19) 10011101111101101001100111110110 
19) 10011101111101101001100111110111 
19) 10011101111101101001101111110101 
19) 10011101111101101001101111110110 
19) 10011101111101101001101111110111 
19) 10011101111101101001110111110101 
19) 10011101111101101001110111110110 
19) 10011101111101101001110111110111 
19) 10011101111101111001100111110101 
19) 10011101111101111001100111110110 
19) 10011101111101111001100111110111 
19) 10011101111101111001101111110101 
19) 10011101111101111001101111110110 
19) 10011101111101111001101111110111 
19) 10011101111101111001110111110101 
19) 10011101111101111001110111110110 
19) 10011101111101111001110111110111 
Process 0 finished in time 9.764574 secs.
A total of 81 solutions were found.
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ scp yl77@borg.calvin.edu:~/374/proj01/slurm-219309.out .
The authenticity of host 'borg.calvin.edu (153.106.194.68)' can't be established.
ECDSA key fingerprint is SHA256:ADQd6bPKQDBmX7Chq8bnavokMF8hKxNdNDdFZurnvjM.
ECDSA key fingerprint 9) 10011011111101101001100111110101 
9) 10011011111101101001100111110110 
9) 10011011111101101001100111110111 
9) 10011011111101101001101111110101 
9) 10011011111101101001101111110110 
9) 10011011111101101001101111110111 
9) 10011011111101101001110111110101 
9) 10011011111101101001110111110110 
9) 10011011111101101001110111110111 
9) 10011011111101111001100111110101 
9) 10011011111101111001100111110110 
9) 10011011111101111001100111110111 
9) 10011011111101111001101111110101 
9) 10011011111101111001101111110110 
9) 10011011111101111001101111110111 
9) 10011011111101111001110111110101 
9) 10011011111101111001110111110110 
9) 10011011111101111001110111110111 
9) 10011101111101011001100111110101 
9) 10011101111101011001100111110110 
9) 10011101111101011001100111110111 
9) 10011101111101011001101111110101 
9) 10011101111101011001101111110110 
9) 10011101111101011001101111110111 
9) 10011101111101011001110111110101 
9) 10011101111101011001110111110110 
9) 10011101111101011001110111110111 
9) 10011101111101101001100111110101 
9) 10011101111101101001100111110110 
9) 10011101111101101001100111110111 
9) 10011101111101101001101111110101 
9) 10011101111101101001101111110110 
9) 10011101111101101001101111110111 
9) 10011101111101101001110111110101 
9) 10011101111101101001110111110110 
9) 10011101111101101001110111110111 
9) 10011101111101111001100111110101 
9) 10011101111101111001100111110110 
9) 10011101111101111001100111110111 
9) 10011101111101111001101111110101 
9) 10011101111101111001101111110110 
9) 10011101111101111001101111110111 
9) 10011101111101111001110111110101 
9) 10011101111101111001110111110110 
9) 10011101111101111001110111110111 
Process 0 finished in time 21.305311 secs.
A total of 81 solutions were found.
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ [K enscript typescript\ 
[ 7 pages * 1 copy ] sent to printer
24 lines were wrapped
2 non-printable characters
]0;yl77@gold26: ~/374/proj01[01;32myl77@gold26[00m:[01;34m~/374/proj01[00m$ mpirun -np 16 -machinefile hosts ./circuitSatisfiabilityChunksSlicesake[Kcat circuitSatisfiability.c[6@Chunks.cSlices.cexit[Krsh gold 25mpirun -np 2 ./circuitSatisfiabilityChunks4 ./circuitSatisfiabilityChunks8 ./circuitSatisfiabilityChunks[1@16 ./circuitSatisfiabilityChunks32 ./circuitSatisfiabilityChunks64 ./circuitSatisfiabilityChunks32 ./circuitSatisfiabilityChunks16 ./circuitSatisfiabilityChunks[1P8 ./circuitSatisfiabilityChunks4 ./circuitSatisfiabilityChunks2 ./circuitSatisfiabilityChunksrsh gold 25[K[7Pexitcat circuitSatisfiabilitySlices.cChunks.c.c[Kmake[Kpirun -np 16 -machinefile hosts ./circuitSatisfiabilitySlicesChunks[Kssh yl77@ca  borg.calvin.edu
yl77@borg.calvin.edu's password: 
Last login: Tue Oct 31 01:06:40 2023 from borg-fw1-int.calvin.edu
]0;yl77@borg-head1:~[?1034h[yl77@borg-head1 ~]$ cd 374
]0;yl77@borg-head1:~/374[yl77@borg-head1 374]$ cd proj01
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ sbatch script_chunks_16_16.slurm[1P[1P[1@4_16[1P[1P[1@8s[1P[1P[1P[1P[1P[1P[1@s[1@l[1@i[1@c[1@e[1@s
Submitted batch job 219309
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ sbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [Ksbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ cd proj01[K[3P374[2Pexit[16@cat slurm-219308.outsbatch script_chunks_1_1.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.out

Process 0 is checking the circuit...
1) 10011001111101011001100111110101 
1) 10011001111101011001100111110110 
1) 10011001111101011001100111110111 
1) 10011001111101011001101111110101 
1) 10011001111101011001101111110110 
1) 10011001111101011001101111110111 
1) 10011001111101011001110111110101 
1) 10011001111101011001110111110110 
1) 10011001111101011001110111110111 
1) 10011001111101101001100111110101 
1) 10011001111101101001100111110110 
1) 10011001111101101001100111110111 
1) 10011001111101101001101111110101 
1) 10011001111101101001101111110110 
1) 10011001111101101001101111110111 
1) 10011001111101101001110111110101 
1) 10011001111101101001110111110110 
1) 10011001111101101001110111110111 
1) 10011001111101111001100111110101 
1) 10011001111101111001100111110110 
1) 10011001111101111001100111110111 
1) 10011001111101111001101111110101 
1) 10011001111101111001101111110110 
1) 10011001111101111001101111110111 
1) 10011001111101111001110111110101 
1) 10011001111101111001110111110110 
1) 10011001111101111001110111110111 
1) 10011011111101011001100111110101 
1) 10011011111101011001100111110110 
1) 10011011111101011001100111110111 
1) 10011011111101011001101111110101 
1) 10011011111101011001101111110110 
1) 10011011111101011001101111110111 
1) 10011011111101011001110111110101 
1) 10011011111101011001110111110110 
1) 10011011111101011001110111110111 
1) 10011011111101101001100111110101 
1) 10011011111101101001100111110110 
1) 10011011111101101001100111110111 
1) 10011011111101101001101111110101 
1) 10011011111101101001101111110110 
1) 10011011111101101001101111110111 
1) 10011011111101101001110111110101 
1) 10011011111101101001110111110110 
1) 10011011111101101001110111110111 
1) 10011011111101111001100111110101 
1) 10011011111101111001100111110110 
1) 10011011111101111001100111110111 
1) 10011011111101111001101111110101 
1) 10011011111101111001101111110110 
1) 10011011111101111001101111110111 
1) 10011011111101111001110111110101 
1) 10011011111101111001110111110110 
1) 10011011111101111001110111110111 
1) 10011101111101011001100111110101 
1) 10011101111101011001100111110110 
1) 10011101111101011001100111110111 
1) 10011101111101011001101111110101 
1) 10011101111101011001101111110110 
1) 10011101111101011001101111110111 
1) 10011101111101011001110111110101 
1) 10011101111101011001110111110110 
1) 10011101111101011001110111110111 
1) 10011101111101101001100111110101 
1) 10011101111101101001100111110110 
1) 10011101111101101001100111110111 
1) 10011101111101101001101111110101 
1) 10011101111101101001101111110110 
1) 10011101111101101001101111110111 
1) 10011101111101101001110111110101 
1) 10011101111101101001110111110110 
1) 10011101111101101001110111110111 
1) 10011101111101111001100111110101 
1) 10011101111101111001100111110110 
1) 10011101111101111001100111110111 
1) 10011101111101111001101111110101 
1) 10011101111101111001101111110110 
1) 10011101111101111001101111110111 
1) 10011101111101111001110111110101 
1) 10011101111101111001110111110110 
1) 10011101111101111001110111110111 
Process 0 finished in time 152.660715 secs.
A total of 81 solutions were found.
]0;yl77@borg-head1:~/374/proj01[yl77@borg-head1 proj01]$ cat slurm-219307.outsbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.outsbatch script_slices_4_8.slurm[yl77@borg-head1 proj01]$ [10Pcat slurm-219307.out[1P[1@9

Process 0 is checking the circuit...
23) 10011001111101011001100111110111 
23) 10011001111101011001101111110111 
23) 10011001111101011001110111110111 
23) 10011001111101101001100111110111 
23) 10011001111101101001101111110111 
23) 10011001111101101001110111110111 
23) 10011001111101111001100111110111 
23) 10011001111101111001101111110111 
23) 10011001111101111001110111110111 
21) 10011001111101011001100111110101 
21) 10011001111101011001101111110101 
21) 10011001111101011001110111110101 
21) 